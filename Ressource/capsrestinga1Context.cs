// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace cadastroDePacientes.Ressource
{
    public partial class capsrestinga1Context : DbContext
    {
        public capsrestinga1Context()
        {
        }

        public capsrestinga1Context(DbContextOptions<capsrestinga1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<colaboradores> colaboradores { get; set; }
        public virtual DbSet<paciente> paciente { get; set; }
        public virtual DbSet<presenca> presenca { get; set; }
        public virtual DbSet<servicos> servicos { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseMySql("server=localhost;database=capsrestinga1;uid=root", Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.4.27-mariadb"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_general_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<colaboradores>(entity =>
            {
                entity.HasKey(e => e.id_colaboradores)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<paciente>(entity =>
            {
                entity.HasKey(e => e.paciente_id)
                    .HasName("PRIMARY");

                entity.HasComment("tabela de registro de pacientes");
            });

            modelBuilder.Entity<presenca>(entity =>
            {
                entity.HasKey(e => e.id_presenca)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.paciente)
                    .WithMany(p => p.presenca)
                    .HasForeignKey(d => d.paciente_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_cidade");
            });

            modelBuilder.Entity<servicos>(entity =>
            {
                entity.HasKey(e => e.id_servicos)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.paciente)
                    .WithMany(p => p.servicos)
                    .HasForeignKey(d => d.paciente_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("servicos_ibfk_1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}